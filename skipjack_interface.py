#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.26
#  in conjunction with Tcl version 8.6
#    Dec 04, 2019 09:36:44 PM +03  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
import skipjack
py3 = True

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = Toplevel1 (root)
    init(root, top)
    root.mainloop()
    
def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    
w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = Toplevel1 (w)
    init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    global decryptedImage
    global encryptedImage
    global decryptedImagePhoto
    global encryptedImagePhoto
    global decryptedImageBytes
    global encryptedImageBytes
    
    ##########################################################################
    ########################### Açılış Fonksiyonu ############################
    ##########################################################################
    def __init__(self, top=None):
        ###########################Tanımlar##################################
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font11 = "-family {Segoe UI} -size 14 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        font9 = "-family {Segoe UI} -size 12 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("814x696+263+0")
        top.minsize(120, 1)
        top.maxsize(1370, 749)
        top.resizable(1, 1)
        top.title("Skipjack Algoritması")
        top.configure(background="#d9d9d9")
                      
        ############################Sekme####################################  
            
        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.025, rely=0.100, relheight=0.860
                , relwidth=0.951)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="Metin",compound="left",underline="-1",)
        self.TNotebook1_t0.configure(background="#d9d9d9")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")

        #######################Çözülmüş Metin################################
        
        self.scrolledtext_decrypted = ScrolledText(self.TNotebook1_t0)
        self.scrolledtext_decrypted.place(relx=0.0, rely=0.143, relheight=0.788
                , relwidth=0.365)
        self.scrolledtext_decrypted.configure(background="white")
        self.scrolledtext_decrypted.configure(font="TkTextFont")
        self.scrolledtext_decrypted.configure(foreground="black")
        self.scrolledtext_decrypted.configure(highlightbackground="#d9d9d9")
        self.scrolledtext_decrypted.configure(highlightcolor="black")
        self.scrolledtext_decrypted.configure(insertbackground="black")
        self.scrolledtext_decrypted.configure(insertborderwidth="3")
        self.scrolledtext_decrypted.configure(selectbackground="#c4c4c4")
        self.scrolledtext_decrypted.configure(selectforeground="black")
        self.scrolledtext_decrypted.configure(wrap="char")

        #######################Çözülmüş Metin Etiketi##########################
    
        self.label_decryptedText = tk.Label(self.TNotebook1_t0)
        self.label_decryptedText.place(relx=0.0, rely=0.036, height=27
                , width=280)
        self.label_decryptedText.configure(background="#b0b0b0")
        self.label_decryptedText.configure(disabledforeground="#a3a3a3")
        self.label_decryptedText.configure(font=font9)
        self.label_decryptedText.configure(foreground="#000000")
        self.label_decryptedText.configure(text='''Çözülmüş Metin''')

        ########################Şifrelenmiş Metin##############################

        self.scrolledtext_encrypted = ScrolledText(self.TNotebook1_t0)
        self.scrolledtext_encrypted.place(relx=0.623, rely=0.143, relheight=0.788
                , relwidth=0.365)
        self.scrolledtext_encrypted.configure(background="white")
        self.scrolledtext_encrypted.configure(font="TkTextFont")
        self.scrolledtext_encrypted.configure(foreground="black")
        self.scrolledtext_encrypted.configure(highlightbackground="#d9d9d9")
        self.scrolledtext_encrypted.configure(highlightcolor="black")
        self.scrolledtext_encrypted.configure(insertbackground="black")
        self.scrolledtext_encrypted.configure(insertborderwidth="3")
        self.scrolledtext_encrypted.configure(selectbackground="#c4c4c4")
        self.scrolledtext_encrypted.configure(selectforeground="black")
        self.scrolledtext_encrypted.configure(wrap="char")

        #####################Şifrelenmiş Metin Etiketi##########################

        self.label_encryptedText = tk.Label(self.TNotebook1_t0)
        self.label_encryptedText.place(relx=0.623, rely=0.036, height=27
                , width=280)
        self.label_encryptedText.configure(activebackground="#f9f9f9")
        self.label_encryptedText.configure(activeforeground="black")
        self.label_encryptedText.configure(background="#b0b0b0")
        self.label_encryptedText.configure(disabledforeground="#a3a3a3")
        self.label_encryptedText.configure(font="-family {Segoe UI} -size 12")
        self.label_encryptedText.configure(foreground="#000000")
        self.label_encryptedText.configure(highlightbackground="#d9d9d9")
        self.label_encryptedText.configure(highlightcolor="black")
        self.label_encryptedText.configure(text='''Şifrelenmiş Metin''')

        ####################Çözülmüş Dosya Adı############################

        self.label_decryptedFilename = tk.Label(self.TNotebook1_t0)
        self.label_decryptedFilename.place(relx=0.0, rely=0.089, height=27
                , width=206)
        self.label_decryptedFilename.configure(background="#d9d9d9")
        self.label_decryptedFilename.configure(disabledforeground="#a3a3a3")
        self.label_decryptedFilename.configure(font=font9)
        self.label_decryptedFilename.configure(foreground="#000000")
        self.label_decryptedFilename.configure(text='''Dosya Adı''')

        ######################Çözülmüş Dosya Seç Butonu#######################
        
        self.button_browseDecrypted = tk.Button(self.TNotebook1_t0)
        self.button_browseDecrypted.place(relx=0.277, rely=0.084, height=34
                , width=67)
        self.button_browseDecrypted.configure(activebackground="#ececec")
        self.button_browseDecrypted.configure(activeforeground="#000000")
        self.button_browseDecrypted.configure(background="#d9d9d9")
        self.button_browseDecrypted.configure(disabledforeground="#a3a3a3")
        self.button_browseDecrypted.configure(foreground="#000000")
        self.button_browseDecrypted.configure(highlightbackground="#d9d9d9")
        self.button_browseDecrypted.configure(highlightcolor="black")
        self.button_browseDecrypted.configure(pady="0")
        self.button_browseDecrypted.configure(text='''Gözat''')
        self.button_browseDecrypted.configure(command=self.callback_button_browseDecrypted)

        #####################Şifrelenmiş Dosya Adı########################

        self.label_encryptedFilename = tk.Label(self.TNotebook1_t0)
        self.label_encryptedFilename.place(relx=0.623, rely=0.089, height=27
                , width=206)
        self.label_encryptedFilename.configure(activebackground="#f9f9f9")
        self.label_encryptedFilename.configure(activeforeground="black")
        self.label_encryptedFilename.configure(background="#d9d9d9")
        self.label_encryptedFilename.configure(disabledforeground="#a3a3a3")
        self.label_encryptedFilename.configure(font="-family {Segoe UI} -size 12")
        self.label_encryptedFilename.configure(foreground="#000000")
        self.label_encryptedFilename.configure(highlightbackground="#d9d9d9")
        self.label_encryptedFilename.configure(highlightcolor="black")
        self.label_encryptedFilename.configure(text='''Dosya Adı''')

        ########################Şifreli Dosya Seç#########################

        self.button_browseEncrypted = tk.Button(self.TNotebook1_t0)
        self.button_browseEncrypted.place(relx=0.9, rely=0.084, height=34
                , width=67)
        self.button_browseEncrypted.configure(activebackground="#ececec")
        self.button_browseEncrypted.configure(activeforeground="#000000")
        self.button_browseEncrypted.configure(background="#d9d9d9")
        self.button_browseEncrypted.configure(disabledforeground="#a3a3a3")
        self.button_browseEncrypted.configure(foreground="#000000")
        self.button_browseEncrypted.configure(highlightbackground="#d9d9d9")
        self.button_browseEncrypted.configure(highlightcolor="black")
        self.button_browseEncrypted.configure(pady="0")
        self.button_browseEncrypted.configure(text='''Gözat''')
        self.button_browseEncrypted.configure(command=self.callback_button_browseEncrypted)

        ########################Şifrele Butonu##########################

        self.button_encrypt = tk.Button(self.TNotebook1_t0)
        self.button_encrypt.place(relx=0.377, rely=0.321, height=64, width=177)
        self.button_encrypt.configure(activebackground="#ececec")
        self.button_encrypt.configure(activeforeground="#000000")
        self.button_encrypt.configure(background="#d9d9d9")
        self.button_encrypt.configure(disabledforeground="#a3a3a3")
        self.button_encrypt.configure(font=font11)
        self.button_encrypt.configure(foreground="#000000")
        self.button_encrypt.configure(highlightbackground="#d9d9d9")
        self.button_encrypt.configure(highlightcolor="black")
        self.button_encrypt.configure(pady="0")
        self.button_encrypt.configure(text='''Şifrele ->''')
        self.button_encrypt.configure(command=self.callback_button_encrypt)

        ###################Şifre Çöz Butonu#############################

        self.button_decrypt = tk.Button(self.TNotebook1_t0)
        self.button_decrypt.place(relx=0.377, rely=0.518, height=64, width=177)
        self.button_decrypt.configure(activebackground="#ececec")
        self.button_decrypt.configure(activeforeground="#000000")
        self.button_decrypt.configure(background="#d9d9d9")
        self.button_decrypt.configure(disabledforeground="#a3a3a3")
        self.button_decrypt.configure(font="-family {Segoe UI} -size 14")
        self.button_decrypt.configure(foreground="#000000")
        self.button_decrypt.configure(highlightbackground="#d9d9d9")
        self.button_decrypt.configure(highlightcolor="black")
        self.button_decrypt.configure(pady="0")
        self.button_decrypt.configure(text='''<- Şifre Çöz''')
        self.button_decrypt.configure(command=self.callback_button_decrypt)

        ###################Çözülmüş Dosyayı Kaydet############################

        self.button_saveDecryptedText = tk.Button(self.TNotebook1_t0)
        self.button_saveDecryptedText.place(relx=0.003, rely=0.932, height=34
                , width=277)
        self.button_saveDecryptedText.configure(activebackground="#ececec")
        self.button_saveDecryptedText.configure(activeforeground="#000000")
        self.button_saveDecryptedText.configure(background="#d9d9d9")
        self.button_saveDecryptedText.configure(disabledforeground="#a3a3a3")
        self.button_saveDecryptedText.configure(foreground="#000000")
        self.button_saveDecryptedText.configure(highlightbackground="#d9d9d9")
        self.button_saveDecryptedText.configure(highlightcolor="black")
        self.button_saveDecryptedText.configure(pady="0")
        self.button_saveDecryptedText.configure(text='''Dosyayı Kaydet''')
        self.button_saveDecryptedText.configure(command=self.callback_button_saveDecryptedText)

        ###################Şifrelenmiş Dosyayı Kaydet#########################
        
        self.button_saveEncryptedText = tk.Button(self.TNotebook1_t0)
        self.button_saveEncryptedText.place(relx=0.626, rely=0.929, height=34
                , width=277)
        self.button_saveEncryptedText.configure(activebackground="#ececec")
        self.button_saveEncryptedText.configure(activeforeground="#000000")
        self.button_saveEncryptedText.configure(background="#d9d9d9")
        self.button_saveEncryptedText.configure(disabledforeground="#a3a3a3")
        self.button_saveEncryptedText.configure(foreground="#000000")
        self.button_saveEncryptedText.configure(highlightbackground="#d9d9d9")
        self.button_saveEncryptedText.configure(highlightcolor="black")
        self.button_saveEncryptedText.configure(pady="0")
        self.button_saveEncryptedText.configure(text='''Dosyayı Kaydet''')
        self.button_saveEncryptedText.configure(command=self.callback_button_saveEncryptedText)

        ###################Menü#########################
        
        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        ###################Anahtar Etiketi#########################
        
        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.025, rely=0.043, height=31, width=254)
        self.Label1.configure(background="#e6e6e6")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font11)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Şifreleme Anahtarı:''')

        ###################Anahtar Girişi#########################

        self.entry_key = tk.Entry(top)
        self.entry_key.place(relx=0.344, rely=0.043,height=30, relwidth=0.619)
        self.entry_key.configure(justify="center")
        self.entry_key.configure(background="white")
        self.entry_key.configure(disabledforeground="#a3a3a3")
        self.entry_key.configure(font="-family {Segoe UI} -size 14")
        self.entry_key.configure(foreground="#000000")
        self.entry_key.configure(insertbackground="black")

############################################################################
###################Fonksiyonlar#############################################
############################################################################
    def callback_button_browseDecrypted(self):  # Çözülmüş dosya seç
        from tkinter.filedialog import askopenfilename
        from os.path import basename
        filepath =  askopenfilename(title = "Dosya seç",filetypes = (("Metin Dosyaları","*.txt"),("Diğer Dosyalar","*.*")))
        self.label_decryptedFilename.configure(text = basename(filepath))
        f = open(filepath, "r")
        text_data = f.read()
        self.scrolledtext_decrypted.delete('1.0', tk.END)
        self.scrolledtext_decrypted.insert(tk.INSERT,text_data)

    def callback_button_browseEncrypted(self):  # Şifreli Dosya seç
        from tkinter.filedialog import askopenfilename
        from os.path import basename
        filepath =  askopenfilename(title = "Dosya seç",filetypes = (("Metin Dosyaları","*.txt"),("Diğer Dosyalar","*.*")))
        self.label_encryptedFilename.configure(text = basename(filepath))
        f = open(filepath, "r")
        text_data = f.read()
        self.scrolledtext_encrypted.delete('1.0', tk.END)
        self.scrolledtext_encrypted.insert(tk.INSERT,text_data)
    
    def callback_button_saveDecryptedText(self):    # Çözülmüş Dosya Kaydet
        from tkinter.filedialog import asksaveasfile
        f = asksaveasfile(mode='w', defaultextension=".txt",title = "Kaydet",filetypes = (("Metin Dosyaları","*.txt"),("Diğer Dosyalar","*.*")))
        if f is None: 
            return
        text2save = str(self.scrolledtext_decrypted.get(1.0, tk.END)) # 1.0 dan başlar
        f.write(text2save)
        f.close() 

    def callback_button_saveEncryptedText(self):        # Şifreli Dosya Kaydet
        from tkinter.filedialog import asksaveasfile
        f = asksaveasfile(mode='w', defaultextension=".txt",title = "Kaydet",filetypes = (("Metin Dosyaları","*.txt"),("Diğer Dosyalar","*.*")))
        if f is None: 
            return
        text2save = str(self.scrolledtext_encrypted.get(1.0, tk.END)) # 1.0 dan başlar
        f.write(text2save)
        f.close()
        
    def callback_button_encrypt(self):          # Şifrele
        from binascii import b2a_base64
        text2encrypt = str(self.scrolledtext_decrypted.get(1.0, tk.END))
        cipher = skipjack.Skipjack(self.entry_key.get())
        self.scrolledtext_encrypted.delete('1.0', tk.END)
        for i in range(0, len(text2encrypt), 8):
            print(text2encrypt[i:i+8])
            encrypted = cipher.encrypt(text2encrypt[i:i+8])  
            print(b2a_base64(encrypted))
            self.scrolledtext_encrypted.insert(tk.INSERT,str(b2a_base64(encrypted))[2:14])    

    def callback_button_decrypt(self):          # Şifre Çöz 
        from binascii import a2b_base64
        text2decrypt = str(self.scrolledtext_encrypted.get(1.0, tk.END))
        print('alinan text: ',text2decrypt, 'alinan text_sonu')
        cipher = skipjack.Skipjack(self.entry_key.get())
        self.scrolledtext_decrypted.delete('1.0', tk.END)
        for i in range(0, len(text2decrypt)-12, 12):
            decrypted = cipher.decrypt(a2b_base64(text2decrypt[i:i+12]))  
            self.scrolledtext_decrypted.insert(tk.INSERT,decrypted)          

        
# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                  + tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    vp_start_gui()









